---
title: Metadata Object
description: |-
  Metadata can be used for many purposes. Enterprises may
  want to have a better

  way to organize their digital assets for their marketing
  teams or developers

  may want to provide advanced content functionality such as
  facilitating

  workflows or approvals. Metadata is also visible in the
  Box Web Application.

  To learn more, please visit the help documentation.

  Templates

  Metadata that belongs to a file/folder is grouped by
  templates. Templates allow the metadata service to
  provide a multitude of services, such as pre-defining
  sets of key:value pairs or schema enforcement on specific
  fields.

  For example, a marketingCollateral template may define
  where and when specific

  marketing content should be used. You can also see the
  representation of the template in the Box web application
  while navigating to a file preview.

  Currently, metadata associated with folders does not show
  in the web application.

  Each file/folder can have multiple distinct template
  instances associated with

  it, such as a marketingCollateral and retentionPolicy
  template instances.

  Template instances are also grouped by scopes. Currently,
  the only scopes

  support are enterprise and global. Enterprise scopes are
  defined on a per

  enterprises basis, whereas global scopes are Box
  application-wide. Attribute

  order within template instances is not guaranteed.


  Currently, there are four attributes supported by
  templates: string, enum,

  float, and  date (RFC 3339).

  Global Properties Template

  In addition to enterprise scoped templates, every file on
  Box has access to

  the global properties template. The Properties template is
  a bucket of free

  form key:value string pairs, with no additional schema
  associated with it.

  Properties are ideal for scenarios where applications want
  to write metadata

  to file objects in a flexible way, without pre-defined
  template structure.


  Properties follow all the conventions of standard
  templates, except for being

  located at a different endpoint. All requests made to the
  properties template

  must be made to
  /files/{file_id}/metadata/global/properties.
type: object
properties:
  template:
    type: string
    description: |-
      The key of the template.  Together with `$parent` and
      `$scope`, this forms

      a unique identifier for the metadata instance.
  scope:
    type: string
    description: |-
      The scope of the object. `global` and `enterprise`
      scopes are supported.

      The `global` scope contains the `properties` template,
      while the

      `enterprise` scope pertains to custom templates within
      the enterprise. The

      ID of the enterprise will be appended to the
      `enterprise` scope in this

      format: `enterprise_{id}`
  parent:
    type: string
    description: |-
      The ID of the object the metadata object belongs to.
      Both

      [file](#file-object) and [folder](#folder-object)
      objects are supported.

      Updating metadata does not directly affect the parent
      object, such as

      changing the `modified_at` field for a file or folder.
  version:
    type: integer
    description: |-
      The version of the metadata object.  Starts at 0 and
      increases every time

      a user-defined property is modified.
  id:
    type: string
    description: 36-character UUID to identify the metadata object
  type:
    type: string
    description: |-
      A unique identifier for the "type" of this instance.
      This is an internal

      system property and should not be used by a client
      application.
  typeVersion:
    type: integer
    description: |-
      The last-known version of the template of the object.
      This is an internal

      system property and should not be used by a client
      application.
  key(s):
    type: string
    description: |-
      Custom value(s) defined by the template. These values
      also have a

      corresponding display name that are viewable in
      applications like the Box

      web application. The total size of a template instance
      can not exceed

      16384 characters. Since the "$" character is reserved
      for metadata service

      keys, custom values can not be prefixed with the "$"
      character.
example:
  test: testvalue
