{
  "swagger": "2.0",
  "info": {
    "title": "Box 2.0 Uploads API",
    "description": "The Box Uploads API allows users to add a new file or add a new file version in the same way as uploading file.",
    "version": "2.0",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "host": "upload.box.com",
  "basePath": "/api/2.0",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "OAuth2Security": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://account.box.com/api/oauth2/authorize",
      "tokenUrl": "https://api.box.com/oauth2/token"
    }
  },
  "security": [
    {
      "OAuth2Security": []
    }
  ],
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["error"]
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "context_info" : {
          "type" : "object",
          "properties": {
            "errors" : {
              "type": "array",
              "items": {
                "type": "object",
                "properties" : {
                  "reason" : {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "message" : {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "code": {
          "type": "string"
        },
        "help-url": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "request-id": {
          "type": "string"
        }
      }
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "total_count": {
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "order": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "by": {
                "type": "string"
              },
              "direction": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Reference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "folder",
            "file",
            "user",
            "file_version",
            "lock",
            "collaboration",
            "comment",
            "task",
            "web_link",
            "collection",
            "task_assignment",
            "event",
            "realtime_server",
            "webhook_event",
            "webhook",
            "enterprise",
            "invite",
            "email_alias",
            "group",
            "group_membership",
            "device_pinner",
            "retention_policy",
            "retention_policy_assignment",
            "file_version_retention",
            "legal_hold_policy",
            "legal_hold_policy_assignment",
            "legal_hold",
            "upload_session"
          ]
        }
      }
    },
    "ItemReference": {
      "type": "object",
      "description": "It references either a file or a folder",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "sequence_id": {
              "type": "string",
              "description": "A unique ID for use with the /events endpoint.\nMay be null for some folders such as root or trash."
            },
            "etag": {
              "type": "string",
              "description": "A unique string identifying the version of this folder.\nMay be null for some folders such as root or trash."
            },
            "name": {
              "type": "string",
              "description": "The name of the folder."
            }
          }
        }
      ]
    },
    "FileReference": {
      "type": "object",
      "description": "It references either a file or a folder",
      "allOf": [
        {
          "$ref": "#/definitions/ItemReference"
        },
        {
          "properties": {
            "sha1": {
              "type": "string",
              "description": "The sha1 hash of this file."
            }
          }
        }
      ]
    },
    "FileVersionReference": {
      "type": "object",
      "description": "The version information of the file.",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "sha1": {
              "type": "string",
              "description": "The sha1 hash of this file."
            }
          }
        }
      ]
    },
    "UserReference": {
      "type": "object",
      "description": "It references a user",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["user"]
        },
        "id": {
          "type": "string",
          "description": "Unqiue string identifying this user."
        },
        "name": {
          "type": "string",
          "description": "Name of this user"
        },
        "login": {
          "type": "string",
          "description": "The email address this user uses to login."
        }
      }
    },
    "PathCollection": {
      "type": "object",
      "description": "The path of folders, starting at the root.",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemReference"
              }
            }
          }
        }
      ]
    },
    "Lock": {
      "type": "object",
      "description": "The lock held on the file.",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "created_by": {
              "$ref": "#/definitions/UserReference"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "expired_at": {
              "type": "string",
              "format": "date-time"
            },
            "is_download_prevented": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "SharedLinkPermissions": {
      "type": "object",
      "properties": {
        "can_download": {
          "type": "boolean"
        },
        "can_preview": {
          "type": "boolean"
        }
      }
    },
    "SharedLink": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "download_url": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "vanity_url": {
          "type": "string"
        },
        "is_password_enabled": {
          "type": "boolean"
        },
        "unshared_at": {
          "type": "string"
        },
        "download_count": {
          "type": "integer",
          "format": "int64"
        },
        "preview_count": {
          "type": "integer",
          "format": "int64"
        },
        "access": {
          "type": "string"
        },
        "effective_access": {
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/SharedLinkPermissions"
        }
      }
    },
    "FilePermissions": {
      "type": "object",
      "description": "The permissions that the current user has on the file",
      "properties": {
        "can_download": {
          "type": "boolean"
        },
        "can_preview": {
          "type": "boolean"
        },
        "can_upload": {
          "type": "boolean"
        },
        "can_rename": {
          "type": "boolean"
        },
        "cand_delete": {
          "type": "boolean"
        },
        "can_share": {
          "type": "boolean"
        },
        "can_invite_collaborator": {
          "type": "boolean"
        },
        "can_set_share_access": {
          "type": "boolean"
        }
      }
    },
    "WatermarkInfo": {
      "type": "array",
      "items": {
        "properties": {
          "is_watermarked": {
            "type": "boolean"
          }
        }
      }
    },
    "Collection": {
      "title": "Collection Object",
      "description": "Collections contain information about the items contained inside of them, including files and folders. The only collection available currently is a “Favorites” collection. The contents of the collection are discovered in a similar way in which the contents of a folder are discovered.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of this collection. The only collection currently available is named “Favorites”"
            },
            "collection_type": {
              "type": "string",
              "description": "The type of the collection. This is used to determine the proper visual treatment for Box-internally created collections. Initially only “favorites” collection-type will be supported.",
              "enum": [
                "favorites"
              ]
            }
          }
        }
      ]
    },
    "BoxFile": {
      "title": "File Object",
      "description": "File information describe file objects in Box, with attributes like who created the file, when it was last modified, and other information. The actual content of the file itself is accessible through the /files/{id}/content endpoint.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FileReference"
        },
        {
          "properties": {
            "file_version": {
              "$ref": "#/definitions/FileVersionReference"
            },
            "description": {
              "type": "string",
              "description": "The description of this file."
            },
            "size": {
              "type": "integer",
              "format": "int64",
              "description": "Size of this file in bytes."
            },
            "path_collection": {
              "$ref": "#/definitions/PathCollection",
              "description": "The path of folders to this file, starting at the root."
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file was created on Box’s servers."
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file was last updated on the Box servers."
            },
            "trashed_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file was last moved to the trash."
            },
            "purged_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file will be permanently deleted."
            },
            "content_created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the content of this file was created (more info)."
            },
            "content_modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the content of this file was last modified (more info)."
            },
            "created_by": {
              "$ref": "#/definitions/UserReference",
              "description": "The user who first created file."
            },
            "modified_by": {
              "$ref": "#/definitions/UserReference",
              "description": "The user who last updated this file."
            },
            "owned_by": {
              "$ref": "#/definitions/UserReference",
              "description": "The user who owns this file."
            },
            "shared_link": {
              "$ref": "#/definitions/SharedLink"
            },
            "parent": {
              "$ref": "#/definitions/ItemReference",
              "description": "The folder containing this file."
            },
            "item_status": {
              "type": "string",
              "description": "Whether this item is deleted or not."
            },
            "version_number": {
              "type": "string",
              "description": "The version number of the file."
            },
            "comment_count": {
              "type": "integer",
              "format": "int64",
              "description": "The number of comments on a file."
            },
            "permissions": {
              "$ref": "#/definitions/FilePermissions"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "All tags applied to this file."
            },
            "collections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collection"
              }
            },
            "lock": {
              "$ref": "#/definitions/Lock"
            },
            "extension": {
              "type": "string",
              "description": "Indicates the suffix, when available, on the file. By default, set to an empty string. The suffix usually indicates the encoding (file format) of the file contents or usage."
            },
            "is_package": {
              "type": "boolean",
              "description": "Whether the file is a package. Used for Mac Packages used by iWorks."
            },
            "expiring_embed_link": {
              "type": "string",
              "description": "An expiring URL for an embedded preview session in an iframe. This URL will expire after 60 seconds and the session will expire after 60 minutes."
            },
            "watermark_info": {
              "$ref": "#/definitions/WatermarkInfo"
            }
          }
        }
      ]
    },
    "FileList": {
      "type": "object",
      "description": "A collection Tasks.",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BoxFile"
              }
            }
          }
        }
      ]
    },
    "UploadSessionEndpoints": {
      "type": "object",
      "description": "URLs for all other possible calls to this session.",
      "properties": {
        "upload_part": {
          "type": "string",
          "description": "The URL for upload part API."
        },
        "commit": {
          "type": "string",
          "description": "The URL for commit API."
        },
        "abort": {
          "type": "string",
          "description": "The URL for abort API."
        },
        "list_parts": {
          "type": "string",
          "description": "The URL for list parts API."
        },
        "status": {
          "type": "string",
          "description": "The URL for status API."
        },
        "log_event": {
          "type": "string",
          "description": "The URL for log event API."
        }
      }
    },
    "UploadSession": {
      "type": "object",
      "description": "Upload Session.",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "session_expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "UTC Time in RFC 3339 date timeformat: 2016-04-17T09:12:36-00:00."
            },
            "part_size": {
              "type": "integer",
              "format": "int64",
              "description": "The part size in bytes that must be used for all parts of this session. Only the last part is allowed to be of a smaller size."
            },
            "total_parts": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of parts expected in this session, as determined by the file size and part size."
            },
            "num_parts_processed": {
              "type": "integer",
              "format": "int32",
              "description": "Tracks Box’s progress in processing all the parts that have been uploaded. Always equal to 0 when creating new upload session. In other cases, this will be the number of parts that have been processed by server. When all parts have been uploaded, but Commit API returned 202, you can check this value == total_parts to check if file was uploaded."
            },
            "session_endpoints": {
              "$ref": "#/definitions/UploadSessionEndpoints"
            }
          }
        }
      ]
    },
    "FileUploadSessionRequest": {
      "type": "object",
      "properties": {
        "folder_id": {
          "description" : "The ID of the folder that will contain the new file",
          "type" : "string"
        },
        "file_size": {
          "description" : "The total number of bytes in the file to be uploaded",
          "type" : "integer",
          "format": "int64"
        },
        "file_name": {
          "description" : "Name of new file",
          "type" : "string"
        }
      }
    },
    "VersionUploadSessionRequest": {
      "type": "object",
      "properties": {
        "file_size": {
          "description" : "The total number of bytes in the file to be uploaded",
          "type" : "integer",
          "format": "int64"
        },
        "file_name": {
          "description" : "Name of new file",
          "type" : "string"
        }
      }
    },
    "UploadPartResponse": {
      "type": "object",
      "properties": {
        "part": {
          "$ref": "#/definitions/Part"
        }
      }
    },
    "Part": {
      "type": "object",
      "properties": {
        "part_id": {
          "type": "string"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "sha1": {
          "type": "string"
        }
      }
    },
    "PartList": {
      "type": "object",
      "properties": {
        "entries": {
          "description": "An array of parts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Part"
          }
        },
        "offset": {
          "description": "The 0-based offset of the first entry in this set. This will be the same as the offset query parameter.",
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "description": "The limit that was used for these entries. This will be the same as the limit query parameter unless that value exceeded the maximum value allowed.",
          "type": "integer",
          "format": "int32"
        },
        "total_count": {
          "description": "This will always be equal to the number of expected parts in the session (i.e. ceiling(file size / part size)).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CommitRequest": {
      "type": "object",
      "properties": {
        "parts": {
          "description": "An arrayof Part objects. MUST be ordered by offset.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Part"
          }
        },
        "attributes": {
          "description": "Optional. An array of attributes to set on the created file. See https://box-content.readme.io/reference#file-object",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    }
  },
  "paths": {
    "/files/content": {
      "post": {
        "tags": [
          "FileUpload"
        ],
        "operationId": "uploadFile",
        "summary": "Upload File",
        "description": "Use the Uploads API to allow users to add a new file.",
        "externalDocs": {
          "url": "https://docs.box.com/reference#upload-a-file"
        },
        "consumes": [
            "multipart/form-data"
        ],
        "parameters": [
          {
              "name" : "file",
              "description" : "File to upload",
              "required" : true,
              "in": "formData",
              "type" : "file"
          },
          {
              "name" : "attributes",
              "description" : "File attributes",
              "in": "formData",
              "required": true,
              "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "File upload error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "201": {
            "description": "The upload would be successful",
            "schema": {
              "$ref": "#/definitions/FileList"
            }
          },
          "409": {
            "description": "Name collision occurs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/files/{FILE_ID}/content": {
      "post": {
        "tags": [
          "FileUpload"
        ],
        "operationId": "uploadFileVersion",
        "summary": "Upload File Version",
        "description": "This method is used to upload a new version of an existing file in a user’s account. ",
        "externalDocs": {
          "url": "https://docs.box.com/reference#upload-a-new-version-of-a-file"
        },
        "consumes": [
            "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "FILE_ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "description": "This is in the ‘etag’ field of the file object",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name" : "attributes",
            "description" : "File attributes",
            "in": "formData",
            "type": "string"
          },
          {
              "name" : "file",
              "description" : "File to upload",
              "required" : true,
              "in": "formData",
              "type" : "file"
          }
        ],
        "responses": {
          "default": {
            "description": "File upload error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "The upload would be successful",
            "schema": {
              "$ref": "#/definitions/FileList"
            }
          }
        }
      }
    },
    "/files/upload_sessions": {
      "post": {
        "tags": [
          "ChunkedUpload"
        ],
        "operationId": "createUploadSession",
        "summary": "Create File Upload Session",
        "description": "Use the Uploads API to create a new session to upload a new file.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileUploadSessionRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "File upload error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "201": {
            "description": "The upload session creation would be successful",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "409": {
            "description": "Name collision occurs.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Preconditioned failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "413": {
            "description": "Request entity too large.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "400": {
            "description": "Bad request. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/files/{FILE_ID}/upload_sessions": {
      "post": {
        "tags": [
          "ChunkedUpload"
        ],
        "operationId": "createUploadSessionNewVersion",
        "summary": "Create File Upload Session",
        "description": "Use the Uploads API to create a new session to upload a new version of existing file.",
        "parameters": [
          {
            "name": "FILE_ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VersionUploadSessionRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "File upload error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "201": {
            "description": "The upload session creation would be successful",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "409": {
            "description": "Name collision occurs. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Preconditioned failed. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "413": {
            "description": "Request entity too large. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "400": {
            "description": "Bad request. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/files/upload_sessions/{SESSION_ID}": {
      "get": {
        "tags": [
          "ChunkedUpload"
        ],
        "operationId": "getUploadSession",
        "summary": "Upload Session Details",
        "description": "Return the information about this session.",
        "parameters": [
          {
            "name": "SESSION_ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Get upload session error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Get would be successful",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "400": {
            "description": "Bad request. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ChunkedUpload"
        ],
        "operationId": "uploadPart",
        "summary": "Upload Part",
        "description": "Upload a part of the file to this session.",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "SESSION_ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Digest",
            "description": "The message digest of the partbody, formatted as specified by RFC 3230. The usage is sha=BASE64_ENCODED_DIGEST. Currently only SHA-1 is supported.As per RFC 3230, the output from SHA-1 algorithm must be Base64 encoded.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Range",
            "description": "Byte range of part within overall file. E.g: bytes 8388608-16777215/445856194. It must not overlap with the range of a part already uploaded to this session.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "bytes",
            "description": "Part bytes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Part upload error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Part upload would be successful",
            "schema": {
              "$ref": "#/definitions/UploadPartResponse"
            }
          },
          "409": {
            "description": "Part conflict. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Preconditioned failed. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "416": {
            "description": "Request range bit satisfiable. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "400": {
            "description": "Bad request. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChunkedUpload"
        ],
        "operationId": "abortUploadSession",
        "summary": "Abort Upload Session",
        "description": "Abort the upload session and discard all data uploaded. This cannot be reversed.",
        "parameters": [
          {
            "name": "SESSION_ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Get upload session error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "204": {
            "description": "Abort would be successful"
          },
          "400": {
            "description": "Bad request. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/files/upload_sessions/{SESSION_ID}/parts": {
      "get": {
        "tags": [
          "ChunkedUpload"
        ],
        "operationId": "listParts",
        "summary": "List Parts",
        "description": "Return the list of parts uploaded so far for this session.",
        "parameters": [
          {
            "name": "SESSION_ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Zero-based index of first part to return. Defaults to zero, if not specified.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "How many parts to return. Defaults to 1000 if not specified, which is also the maximum value allowed.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "Upload commit error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "List would be successful",
            "schema": {
              "$ref": "#/definitions/PartList"
            }
          },
          "400": {
            "description": "Bad request. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/files/upload_sessions/{SESSION_ID}/commit": {
      "post": {
        "tags": [
          "ChunkedUpload"
        ],
        "operationId": "commitUploadSession",
        "summary": "Commit Upload",
        "description": "Create a Box file comprised of the uploaded parts.",
        "parameters": [
          {
            "name": "SESSION_ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Digest",
            "description": "The message digest of the file, formatted as specified by RFC 3230. The usage is sha=BASE64_ENCODED_DIGEST. Currently only SHA-1 is supported.As per RFC 3230, the output from SHA-1 algorithm must be Base64 encoded.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "description": "This is in the ‘etag’ field of the file object. See https://developer.box.com/v2.0/reference#if-match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-Non-Match",
            "description": "This is in the ‘etag’ field of the file object. See https://developer.box.com/v2.0/reference#if-match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommitRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Part upload error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "201": {
            "description": "The file has been committed successfully",
            "schema": {
              "$ref": "#/definitions/FileList"
            }
          },
          "202": {
            "description": "All parts have been uploaded but not yet processed. Use Get Upload Session API to get more information about the progress of processing the parts. Retry commit afterwards",
            "headers": {
              "Retry-After": {
                "description": "Indicates the number of seconds the client should wait before attempting their commit request again.",
                "type": "integer"
              }
            }
          },
          "409": {
            "description": "There is already a file with the same name in the target folder.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "The If-Match condition failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "413": {
            "description": "Request entity too large. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "400": {
            "description": "Bad request. See response body for details.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  }
}
