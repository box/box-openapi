---
operationId: post_metadata_cascade_policies

summary: Create metadata cascade policy

tags:
  - Metadata cascade policies

x-box-tag: metadata_cascade_policies
x-box-sanitized: true

description: |-
  Creates a new metadata cascade policy that applies a given
  metadata template to a given folder and automatically
  cascades it down to any files within that folder.

  In order for the policy to be applied a metadata instance must first
  be applied to the folder the policy is to be applied to.

requestBody:
  content:
    application/json:
      schema:
        type: object
        required:
          - folder_id
          - scope
          - templateKey
        properties:
          folder_id:
            type: string
            description: |-
              The ID of the folder to apply the policy to. This folder will
              need to already have an instance of the targeted metadata
              template applied to it.
            example: "1234567"

          scope:
            description: |-
              The scope of the targeted metadata template. This template will
              need to already have an instance applied to the targeted folder.
            example: "enterprise"
            type: string
            enum:
              - global
              - enterprise

          templateKey:
            type: string
            example: productInfo
            description: |-
              The key of the targeted metadata template. This template will
              need to already have an instance applied to the targeted folder.

              In many cases the template key is automatically derived
              of its display name, for example `Contract Template` would
              become `contractTemplate`. In some cases the creator of the
              template will have provided its own template key.

              Please [list the templates for an enterprise][list], or
              get all instances on a [file][file] or [folder][folder]
              to inspect a template's key.

              [list]: e://get-metadata-templates-enterprise
              [file]: e://get-files-id-metadata
              [folder]: e://get-folders-id-metadata

responses:
  201:
    description: |-
      Returns a new of metadata cascade policy
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/MetadataCascadePolicy'

  400:
    description: |-
      Returns an error when any of the parameters are not in a valid format.

      * `bad_request` - Either the `scope`, `templateKey`, or `folder_id` are
      not in a valid format.
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ClientError'

  403:
    description: |-
      Returns an error when trying to apply a policy to a restricted folder, for
      example the root folder with ID `0`.

      * `forbidden` - Although the folder ID was valid and the user has access
      to the folder, the policy could not be applied to this folder.
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ClientError'

  404:
    description: |-
      Returns an error when the template or folder can not be found, or when the
      user does not have access to the folder or template.

      * `instance_tuple_not_found` - The template could not be found or the user
      does not have access to the template.
      * `not_found` - The folder could not be found or the user
      does not have access to the folder.
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ClientError'

  409:
    description: |-
      Returns an error when a policy for this folder and template is already in
      place.

      * `tuple_already_exists` - A cascade policy for this combination of
      `folder_id`, `scope` and `templateKey` already exists.
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ConflictError'

  default:
    description: |-
      An unexpected client error.
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ClientError'
